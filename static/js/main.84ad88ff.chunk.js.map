{"version":3,"sources":["CardTwo.js","ReportCardList.js","SearchBox.js","HomeBar.js","reports.js","App.js","serviceWorker.js","index.js"],"names":["CardTwo","id","name","description","report_url","screen_shot","Card","className","style","width","height","backgroundColor","textAlign","display","padding","Body","Img","variant","src","Text","Button","href","block","ReportCardList","reports","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","HomeBar","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","Nav","Link","Form","inline","FormControl","Jumbotron","fluid","Container","button_desc","App","onSearchChange","event","setState","target","value","state","this","console","log","filteredReports","filter","toLowerCase","includes","CardDeck","flexDirection","justifyContent","alignContent","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.84ad88ff.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, Button} from 'react-bootstrap';\r\nimport './CardTwo.css'\r\n\r\n\r\n\r\n\r\n\r\nconst CardTwo = ({id, name, description, report_url, screen_shot}) => {\r\n    return (\r\n\r\n        <Card  className='tc ma2 grow bw2 shadow-5' style={{width: '18rem', height: '26rem', backgroundColor: '#cdecff', textAlign:\"center\", display: \"inline-block\", padding:8}}>\r\n            <h3>{name}</h3>\r\n                <Card.Body>\r\n                  <Card.Img variant=\"top\" src={screen_shot} style={{width:250, height:230}}/>\r\n                  <Card.Text>{description}</Card.Text>\r\n                  <Button style={{backgroundColor: '#357edd'}} href = {report_url} block>View Report</Button>\r\n                </Card.Body>\r\n            \r\n        </Card>\r\n    );\r\n\r\n}\r\n\r\nexport default CardTwo;\r\n\r\n","import React from 'react';\r\n//import ReportCard from './ReportCard';\r\nimport CardTwo from './CardTwo';\r\n\r\n\r\n\r\nconst ReportCardList = ({reports}) => {\r\n    return (\r\n        <div>\r\n            {\r\n            reports.map((user, i) => {\r\n                return ( \r\n                        <CardTwo\r\n                        key={reports[i].id} \r\n                        id={reports[i].id} \r\n                        name={reports[i].name}\r\n                        description={reports[i].description} \r\n                        report_url={reports[i].report_url}\r\n                        screen_shot={reports[i].screen_shot}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ReportCardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                placeholder='Search reports...' \r\n                onChange= {searchChange}\r\n                />\r\n                \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\nimport Button from 'react-bootstrap/Button';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport './HomeBar.css';\r\n\r\n\r\n\r\nconst HomeBar = () => {\r\n    return (\r\n            <div>\r\n                <Navbar bg=\"light\" expand=\"lg\">\r\n                    <Navbar.Brand href=\"#home\">CCBU Main Menu</Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"mr-auto\">\r\n                            <Nav.Link href=\"#home\">Home</Nav.Link>\r\n                            <Nav.Link href=\"#link\">Team Reports</Nav.Link>\r\n                            <Nav.Link href=\"#link\">Communications</Nav.Link>\r\n                            <Nav.Link href=\"#link\">Media</Nav.Link>\r\n                            <Nav.Link href=\"#link\">Retail</Nav.Link>\r\n                            <Nav.Link href=\"#link\">CPG</Nav.Link>\r\n                        </Nav>\r\n                        <Form inline>\r\n                            <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n                            <Button variant=\"outline-success\">Search</Button>\r\n                        </Form>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n\r\n                <Jumbotron fluid style={{backgroundColor: '#357edd'}}>\r\n                    <Container>\r\n                        <h1>Welcome to the CCBU Team Reporting Page!</h1>\r\n                    </Container>\r\n                </Jumbotron>\r\n            </div>\r\n            );\r\n}\r\n\r\nexport default HomeBar;","export const reports = [\r\n    {\r\n        id:1,\r\n        name: 'All Opps Report',\r\n        description: 'Based on data pulled from Orion',\r\n        report_url: 'https://ccbu-viya35.aws.sas.com/links/resources/report?uri=%2Freports%2Freports%2F2dd230ca-ee5e-4998-b682-ac9cff3aa656&page=vi102866',\r\n        button_desc: 'View Opps Report',\r\n        screen_shot: 'ORION_Report_SC.png'\r\n    },\r\n\r\n    {\r\n        id:2,\r\n        name: 'MIDAS Reports',\r\n        description: 'Based on data pulled from MIDAS',\r\n        report_url: 'https://ccbu-viya35.aws.sas.com/links/resources/report?uri=%2Freports%2Freports%2F4f69e689-823a-4e37-9470-bcbca98d94da&page=vi2777',\r\n        button_desc: 'View MIDAS Report',\r\n        screen_shot: 'MIDAS_Report_SC.png'\r\n    }\r\n];","import React, { Component } from 'react';\r\nimport ReportCardList from './ReportCardList';\r\nimport SearchBox from './SearchBox';\r\nimport HomeBar from './HomeBar';\r\nimport { reports } from './reports';\r\nimport {CardDeck} from 'react-bootstrap';\r\n\r\n\r\nclass App extends Component {\r\n    constructor () {\r\n        super()\r\n        this.state = {\r\n            reports: reports,\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ reports:reports })\r\n        console.log('check');\r\n    }\r\n\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState( {searchfield:event.target.value} )\r\n    }\r\n\r\n\r\n    render () {\r\n        const filteredReports = this.state.reports.filter(reports => {\r\n            return reports.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        })\r\n        return (\r\n            <div className='tc'>\r\n                <HomeBar />\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <CardDeck style={{padding: 20, display:'flex', flexDirection:'row', justifyContent:'center', alignContent: 'start' }}>\r\n                    <ReportCardList reports={filteredReports}/>\r\n                </CardDeck>\r\n                \r\n            </div>\r\n        );\r\n    }   \r\n\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// React component imports\n\n//import Toast from 'react-bootstrap/Toast';\n\nReactDOM.render(\n                <App />\n  ,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}